import React, { useState, useEffect } from "react";
import { AlertCircle, CheckCircle } from "lucide-react";

const API_KEY = "AIzaSyDHabYfby9JrvSEzDmsJzZLFZcQYzKh_7Q";

function formatAIText(text) {
  if (!text) return "";
  let html = text;
  // Bold **text**
  html = html.replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>");
  // Italic *text*
  html = html.replace(/\*(.*?)\*/g, "<em>$1</em>");
  // Headings ## ...
  html = html.replace(
    /^### (.*)$/gm,
    '<h3 class="text-lg font-bold text-purple-700 mt-6 mb-2">$1</h3>'
  );
  html = html.replace(
    /^## (.*)$/gm,
    '<h2 class="text-2xl font-extrabold text-purple-800 mt-8 mb-3 flex items-center gap-2">üîÆ $1</h2>'
  );
  html = html.replace(
    /^# (.*)$/gm,
    '<h1 class="text-3xl font-extrabold text-purple-900 mt-10 mb-4 flex items-center gap-2">üåü $1</h1>'
  );
  // Unordered list
  html = html.replace(
    /\n\s*\* (.*?)(?=\n|$)/g,
    '<li class="ml-6 list-disc">$1</li>'
  );
  // Ordered list
  html = html.replace(
    /\n\s*\d+\. (.*?)(?=\n|$)/g,
    '<li class="ml-6 list-decimal">$1</li>'
  );
  // Wrap lists in <ul> or <ol>
  html = html.replace(
    /(<li class="ml-6 list-disc">[\s\S]*?<\/li>)/g,
    '<ul class="mb-2">$1</ul>'
  );
  html = html.replace(
    /(<li class="ml-6 list-decimal">[\s\S]*?<\/li>)/g,
    '<ol class="mb-2">$1</ol>'
  );
  // Line breaks
  html = html.replace(/\n{2,}/g, "<br/><br/>");
  html = html.replace(/\n/g, "<br/>");
  return html;
}

async function callGeminiAPI(prompt) {
  const response = await fetch(
    `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${API_KEY}`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
    }
  );
  if (!response.ok) throw new Error(`API Error: ${response.status}`);
  const data = await response.json();
  return (
    data.candidates?.[0]?.content?.parts?.[0]?.text ||
    "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI."
  );
}

const AIKhaiPhaAssistant = ({
  mbtiResult,
  mbtiDescription,
  mbtiPercentages,
  riasecScores,
  riasecAnswers,
  careerRecommendations,
  userInfo,
  onAnalysisComplete,
  aiAnalysisCompleted = false, // Th√™m prop ƒë·ªÉ ki·ªÉm tra xem ƒë√£ ho√†n th√†nh ch∆∞a
  aiAnalysisResult = "", // Th√™m prop ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ Firebase
}) => {
  const [loading, setLoading] = useState(false);
  const [aiResult, setAiResult] = useState("");
  const [error, setError] = useState("");
  const [hasClicked, setHasClicked] = useState(false);

  // T·∫°o key duy nh·∫•t cho AI analysis
  const getAnalysisKey = () => {
    const userKey = userInfo?.name || userInfo?.email || "anonymous";
    return `aiAnalysis_${userKey}_${mbtiResult}_${JSON.stringify(
      riasecScores
    )}`;
  };

  // Ki·ªÉm tra xem ƒë√£ ho√†n th√†nh ch∆∞a t·ª´ localStorage ho·∫∑c Firebase
  useEffect(() => {
    const analysisKey = getAnalysisKey();
    const savedResult = localStorage.getItem(analysisKey);
    if (savedResult || aiAnalysisCompleted) {
      setAiResult(savedResult || aiAnalysisResult || "");
      setHasClicked(true);
    }
  }, [
    mbtiResult,
    riasecScores,
    userInfo,
    aiAnalysisCompleted,
    aiAnalysisResult,
  ]);

  const buildPrompt = () => {
    return `B·∫°n l√† m·ªôt chuy√™n gia h∆∞·ªõng nghi·ªáp, h√£y khai ph√° ti·ªÅm nƒÉng b·∫£n th√¢n cho h·ªçc sinh d·ª±a tr√™n to√†n b·ªô d·ªØ li·ªáu sau. H√£y ph√¢n t√≠ch c·ª±c k·ª≥ chi ti·∫øt, tr·∫£ l·ªùi c√†ng d√†i c√†ng t·ªët, c√†ng nhi·ªÅu c√†ng t·ªët, kh√¥ng gi·ªõi h·∫°n s·ªë l∆∞·ª£ng t·ª´, c√†ng s√¢u c√†ng t·ªët, ph√¢n t√≠ch t·ª´ng kh√≠a c·∫°nh, t·ª´ng ch·ªâ s·ªë, t·ª´ng ng√†nh ngh·ªÅ, t·ª´ng ƒëi·ªÉm m·∫°nh/y·∫øu, t·ª´ng c∆° h·ªôi ph√°t tri·ªÉn, t·ª´ng l·ªùi khuy√™n c√° nh√¢n h√≥a, t·ª´ng v√≠ d·ª• th·ª±c t·∫ø, t·ª´ng con ƒë∆∞·ªùng s·ª± nghi·ªáp, t·ª´ng k·ªπ nƒÉng c·∫ßn ph√°t tri·ªÉn, t·ª´ng r·ªßi ro, t·ª´ng ngu·ªìn l·ª±c, t·ª´ng b∆∞·ªõc ƒëi ti·∫øp theo, t·ª´ng ng√†nh ngh·ªÅ ph√π h·ª£p, t·ª´ng l√Ω do t·∫°i sao ph√π h·ª£p, t·ª´ng ng√†nh kh√¥ng ph√π h·ª£p, t·ª´ng l·ªùi khuy√™n v·ªÅ h·ªçc t·∫≠p, ph√°t tri·ªÉn b·∫£n th√¢n, ƒë·ªãnh h∆∞·ªõng t∆∞∆°ng lai, v.v. H√£y tr·∫£ l·ªùi th·∫≠t d√†i, th·∫≠t nhi·ªÅu, th·∫≠t chi ti·∫øt, kh√¥ng b·ªè s√≥t b·∫•t k·ª≥ th√¥ng tin n√†o.\n\nTh√¥ng tin h·ªçc sinh: ${
      userInfo ? JSON.stringify(userInfo, null, 2) : "Kh√¥ng c√≥"
    }\n\nK·∫øt qu·∫£ MBTI: ${mbtiResult} - ${mbtiDescription}\nT·ª∑ l·ªá MBTI: ${
      mbtiPercentages ? JSON.stringify(mbtiPercentages) : "Kh√¥ng c√≥"
    }\n\nK·∫øt qu·∫£ RIASEC: ${
      riasecScores ? JSON.stringify(riasecScores) : "Kh√¥ng c√≥"
    }\n\nC√¢u tr·∫£ l·ªùi RIASEC: ${
      riasecAnswers ? JSON.stringify(riasecAnswers) : "Kh√¥ng c√≥"
    }\n\nTop ng√†nh ngh·ªÅ g·ª£i √Ω:\n${
      careerRecommendations
        ? careerRecommendations
            .map(
              (c, i) =>
                `#${i + 1} ${c.name}: ${
                  c.description
                } (MBTI: ${c.mbtiTypes?.join(
                  ", "
                )}, RIASEC: ${c.riasecTypes?.join(", ")}, Score: ${c.score})`
            )
            .join("\n")
        : "Kh√¥ng c√≥"
    }\n\nH√£y ph√¢n t√≠ch to√†n di·ªán, kh√¥ng b·ªè s√≥t b·∫•t k·ª≥ d·ªØ li·ªáu n√†o, tr·∫£ l·ªùi th·∫≠t d√†i, th·∫≠t nhi·ªÅu, th·∫≠t s√¢u, th·∫≠t chi ti·∫øt, th·∫≠t c√° nh√¢n h√≥a, th·∫≠t th·ª±c t·∫ø, th·∫≠t truy·ªÅn c·∫£m h·ª©ng, th·∫≠t c·ª• th·ªÉ, th·∫≠t h·ªØu √≠ch. Kh√¥ng gi·ªõi h·∫°n s·ªë l∆∞·ª£ng t·ª´. H√£y b·∫Øt ƒë·∫ßu!`;
  };

  const callAI = async () => {
    if (hasClicked) return; // Kh√¥ng cho b·∫•m n·∫øu ƒë√£ b·∫•m r·ªìi

    setHasClicked(true);
    setLoading(true);
    setError("");
    setAiResult("");
    try {
      const prompt = buildPrompt();
      const finalResult = await callGeminiAPI(prompt);

      setAiResult(finalResult);

      // L∆∞u v√†o localStorage ƒë·ªÉ tr√°nh m·∫•t khi reload
      const analysisKey = getAnalysisKey();
      localStorage.setItem(analysisKey, finalResult);

      // G·ªçi callback n·∫øu c√≥
      if (onAnalysisComplete) {
        onAnalysisComplete(finalResult);
      }
    } catch (e) {
      setError(e.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
      setHasClicked(false); // Reset n·∫øu c√≥ l·ªói
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <div className=" my-8 p-6 bg-gradient-to-br from-purple-50 to-purple-100 rounded-2xl border-2 border-purple-300 shadow-2xl">
        <h3 className="text-2xl font-bold text-purple-800 mb-4 flex items-center gap-2">
          üßë‚Äçüíº Tr·ª£ l√Ω AI khai ph√° ti·ªÅm nƒÉng b·∫£n th√¢n
        </h3>
        <p className="mb-4 text-purple-700 text-lg font-medium">
          Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ AI ph√¢n t√≠ch to√†n di·ªán t·∫•t c·∫£ d·ªØ li·ªáu k·∫øt qu·∫£ v√†
          khai ph√° ti·ªÅm nƒÉng c·ªßa b·∫°n.
        </p>

        {aiAnalysisCompleted && (
          <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-lg">
            <div className="flex items-center gap-2 text-green-700">
              <CheckCircle className="w-4 h-4" />
              <span className="text-sm font-medium">
                ‚úÖ AI analysis ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh tr∆∞·ªõc ƒë√≥. K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u
                trong h·ªá th·ªëng.
              </span>
            </div>
          </div>
        )}
        <button
          onClick={callAI}
          disabled={loading || hasClicked}
          className={`px-8 py-3 text-white font-bold rounded-xl transition-all duration-200 shadow-lg mb-4 text-lg tracking-wide ${
            hasClicked || aiAnalysisCompleted
              ? "bg-gray-400 cursor-not-allowed"
              : "bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 hover:shadow-xl transform "
          }`}
        >
          {loading ? (
            <span className="flex items-center gap-2">
              <span className="animate-spin inline-block w-5 h-5 border-2 border-white border-t-transparent rounded-full"></span>{" "}
              ƒêang ph√¢n t√≠ch...
            </span>
          ) : hasClicked || aiAnalysisCompleted ? (
            <span>‚úÖ ƒê√£ ho√†n th√†nh ph√¢n t√≠ch (Ch·ªâ ƒë∆∞·ª£c l√†m 1 l·∫ßn)</span>
          ) : (
            <span>üîç Khai ph√° ti·ªÅm nƒÉng (1 l·∫ßn duy nh·∫•t)</span>
          )}
        </button>
        {error && (
          <div className="mt-4 text-red-600 font-semibold text-lg">
            L·ªói: {error}
          </div>
        )}
        {aiResult && (
          <div
            className="mt-6 p-6 bg-gradient-to-br from-white to-purple-50 rounded-lg border border-purple-200 shadow-md max-h-[600px] overflow-y-auto text-purple-900 relative group transition-all duration-300"
            style={{
              lineHeight: 1.9,
              fontSize: "1.05rem",
              fontFamily: '"Segoe UI", "Roboto", "Arial", sans-serif',
              letterSpacing: "0.01em",
            }}
          >
            <div dangerouslySetInnerHTML={{ __html: formatAIText(aiResult) }} />
          </div>
        )}
      </div>
    </>
  );
};

export default AIKhaiPhaAssistant;
